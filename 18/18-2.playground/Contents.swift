import UIKit

//var input = """
//1 + (2 * 3) + (4 * (5 + 6))
//2 * 3 + (4 * 5)
//5 + (8 * 3 + 9 + 3 * 4 * 3)
//5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))
//((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2
//"""

var input = """
9 + 2 * ((7 + 9 + 5 + 7) * 3 + (5 * 3 * 6 * 5 + 6) + (9 * 4 + 9 * 6 + 9)) * 8 + 5
(5 * 2 * 2 + (3 * 8 * 9 * 7) * 3 * 9) * (7 + 3 + (5 + 4 + 8 + 6) + 3 + 2 + 2) * 4 * 8
2 + 6 * (2 * (2 * 6) * 3 + (7 + 2 * 4 + 7)) * 8 + 5 * 4
7 + 5 + (8 * 6 + 8) * 6 + (4 * 3 + 5 * 8 + 7 * 9) + 5
((4 * 8 + 2 + 9 * 3 * 7) * (3 + 6 + 3 * 2 * 7 + 4) + 2 * (9 * 5) * 4 * 3) + 9 + (3 + 9 * 2 + 9 + (4 * 3) * (4 + 4 + 7 * 5 * 2 * 9)) * 4
(8 + 8 + 3) * 7 + (7 * 7 + 7)
9 + ((8 * 2 * 6 + 2 + 6) * 6 + 3 + 2 * 9) * 3 * ((7 * 4 + 6) * 5 * 6 + 4 * 5 + 5) + 2 + 2
((3 * 3 * 5 + 7 + 5 + 8) + 7 + 2 * (4 + 9 * 8 + 7 * 2)) + 6 + 3 * 7 + 6 + 9
(6 * 2 * 7) + (6 * 9 * 5 + 2 + (2 * 6 * 3) * 7) * (5 + 9 + 8 + 6 * 6) + 2
2 * 4 * 8 + 9 + ((9 + 5) + 9 * 7) * (7 * 7 * (2 * 5 + 2 + 4 + 6) * 5)
2 * 3 * 8 * (3 * 7 * 8 * 5) + 4
6 + ((8 * 3) * 2 * (7 * 2 + 5 + 2) + (9 * 2) * (2 + 3 * 9) * (5 + 9)) * 2 + 9
3 + 7 * 9 * 3 * (4 * 7 * 8 * 8 + 2)
(5 + 2 * 6 + 4 * 7) * (4 * 5 + 4 * 3 * 9) * (9 * 7) + 3 + 7
(5 + 6 + 8 + 8 * 2) * 2
9 + 2 * 4 + (9 + 2 + 9 + 4)
7 + 6 + (3 + 4 + 9 * 2 + (9 * 3 * 5 * 5 * 3)) * 5 + (8 + 6 * 8 * 4 + 5) * (3 + (6 + 7 + 5 + 4))
6 + 3 + 2 * ((7 + 3 + 8) + 2 + (9 * 6 + 4) * 3) + 3
8 + (3 + (7 + 7 + 5 + 3 + 7) * 9 + (4 + 6 + 4 + 6 + 3) + (9 + 3 + 8 * 6)) + 9 * (3 + 7 + 9 * (6 * 8) + 7) + (8 * 4)
4 + 8 * 2 + (6 + 6 * (7 * 7 + 3 + 6 * 6) + (9 * 4 + 9 * 3 * 6 + 7) + 6) + ((3 * 5 * 6 * 8 + 3) * 3 * (5 + 2 + 5 + 9) + (8 * 5 + 5 + 6 + 6) * 5 + 2)
9 + ((4 * 6 * 8 + 8 * 2 * 3) + 3)
2 * ((6 + 4 + 3) * 8 + 2) * 9 + 6
9 * (5 * 8 + 6) + 3 * 4 * 2 * 8
2 + (2 + 8 * (3 + 6 + 7 * 5) + 2 + 3 + 2)
8 * 8 + (3 + 7 + 2 * 3 * 3) * 6 + 7
(4 * 6 * 4 * 4 * 4) * 6 * (2 * 2 + 7 * (5 + 9 + 2) + (3 * 6 + 6) + 7) + 5 + 7 + 8
5 + (7 + 2 * 9) * (4 * 5 + 8 * 4 + 4) * 9 * 6
5 + 7 * (4 * 7)
4 + (8 * 6)
9 + 3 * 6 + (7 * (4 + 9 + 2) * 5)
5 + 4 * 6 + 2 + 8 + (7 + 5 + (6 * 8 + 2 * 3))
5 + (6 + 9 + (5 * 4 + 5) + 3 * 6 + 6)
6 + 5 + 5 + ((2 + 8 * 8 * 8) + (8 * 8) * (9 + 6 * 6 + 7 * 5) * 8 * 9) * 4 * 3
((2 + 5 * 9) * 3 * 9 + (9 + 6 + 3) * 9) * 4 * 9 * 7 * 6
5 + (2 + (3 * 4 * 4) * 5 + 4 * 9 * (5 + 7 * 3))
3 + 4 + 6 + 5 + 4
2 * 4 + 6
2 + 2 + (7 * (5 + 3 * 5 * 3 + 8 * 7) * 7 + (8 * 7 * 7)) + (8 * 9 * 5) + 8
3 * 8 + 5 + 4 * (3 + (9 + 4 + 3) + (7 + 6 * 4 + 9 + 9 + 7) + (9 * 4 + 7 + 7 * 9) * (5 * 7 * 3 * 7 + 9 + 2) + 4)
5 + 6 + (8 * 4 * 7) + 5 * ((8 * 8 + 5 + 9 + 2 + 9) + 3 + 5 * 9) + (3 + (6 * 2 * 3 * 7) + 5 + 3 * 8)
6 * 4 + 8 + (6 * 4 * 8 + 4) * 6 + 4
2 * (9 + 9 + (3 + 2 + 6) * 7 + 5 * 4) + 2 + 7 * 7 * 2
6 + 3 * 6 * 7 * (2 + (9 + 7 * 5 + 9 * 3 + 4) + (5 + 8 * 6) + 2 * (6 * 6 + 5 * 6) + 4) + 4
(9 * 8 * 9 + 7 * 8 * 6) + 3
(6 + 8 + 9) + 4 + (6 + (4 + 4 + 2 + 3 + 6 * 3) + (4 * 3 + 7 * 5 * 6) * 9 + 9) * 3
(3 + 6) + (3 + 4) + 3 + 4 * 4 + 2
((9 + 2 * 2) * 7 + 6) * 5 + 9 * 6 * (3 * 4 + 2 + (2 * 7) * 7 + 2) * ((4 + 3) + 8 + (4 + 2 * 2) + 8 + 8)
2 + ((7 + 8) * 2 + 6 + 3 * 7 + 9)
4 * (2 * (2 + 6 * 7 + 6) + (9 * 7 + 5 * 7 * 2))
(4 * (3 + 9 + 2 * 7 * 7 * 5) + 7 + 7 * (8 * 2 + 7 * 4)) + 9 + 6
((5 + 3 * 5 * 4) + 7 + 9 * 3 + 4 + 5) + 2
4 * 3 + 2 * 4 * 7 * 3
6 + ((2 + 5 * 6 * 6 * 9) + 7 * 8 + (8 * 4 + 7 * 3)) + 3 * 2
5 * 4 * 9 + 2 * (2 * (8 + 5 + 7 + 3 * 8) + 4 * 3 * 9) * 9
2 * 7 + ((4 * 7 + 6 * 2 + 8 + 9) + (6 + 2 * 8 + 5))
(8 * 2 + 4 + (6 + 5 * 4) * 3 * 6) * 4
((5 + 7 * 6) + 2 * 6 + 3) + 6 + 2 + 4 * 9
((3 * 8 + 2) + 5 + (8 + 8 * 3 + 9 + 6 + 3)) * 3
3 + 6 + 6 + (6 + 5 + 8) * (4 * 5 * 2 * 5)
3 + (2 + 2 + 6 * 8 * 8) + (7 * 3 + 3 + 7 * 5 + 7) + (6 * 6 + 4 * 7 + 6)
((4 + 6 * 7) * (5 * 4 + 4 + 4 + 2 + 8)) * 2 + (9 * (8 + 6 * 9)) + ((6 + 8 * 2) * 8 * 2)
5 + 2 + (4 * 9 * 4 * 2 + 3 * 4) + 8
((2 * 4) + (6 * 9) * 5) * 5 + 6
((5 + 3) * (3 + 9 * 7) * 5 * 6 + 3) * 3
3 + 4 * 5 + 6 * 7
(8 + 4 * 6 + 7 * 6) + (2 * 3 * 3 * 2 * 3) * 2 * 3 + 9 * 5
((6 + 9 + 4 + 9 * 7) + (3 + 4) + 7 + 2 + (3 * 9 + 4 * 5 + 9) * 4) * 4 + 7
8 * 6 * 9 + (9 + 3 + (3 + 5 * 8 + 7 * 9) * 5 * (4 + 6 * 9 + 3) + 6) + 4 + 6
9 * 2 * ((6 * 3 + 6) + 5) + (5 + 8 * 9 + 5 + (8 * 6))
((9 * 7 * 4 * 7 + 3 + 7) + 4 + 5) * 8 + 6 + 3 * 4 + ((9 * 7 * 8 * 3 * 8) + 3 + 5 * 6 + 2)
9 + (8 + 2 * 9 + 8) * (8 * 5 * 4 + 6 + 2 * (4 + 9 * 4 + 5))
3 + 7 * 5 * 4
(8 * (9 + 5 * 6) * (9 + 6 * 9 + 7 + 5) + 7 + 4 * 6) * 4
(4 * (5 * 5 * 5 * 7) + 3) * (6 * 3) + 3 + 4
3 + ((7 + 2 + 4) + 9 + 4) * (2 * 9 + 4 * 3 * 6) + 8 * 9 + 8
3 * (7 * 9 * 5 + 2 * 5 * (5 + 5)) + 8 * 5
5 * ((2 + 7 + 8 * 9) + (3 + 4 + 6 + 4 + 4 * 4) * 4 + (5 * 8 + 3) * 3 * (9 + 9 + 6 * 5 + 6)) * 5
(5 * 7 + 2 + 8) + 8
(4 + 6 * (2 + 8 + 5 * 6 + 7 + 4) * 3 + (6 + 4 + 7)) + (6 + 5 * 6) * 2 + (3 * 2 + 2 + 5 + 9 * 8)
5 * 2 + ((2 * 2 * 2 + 6) * (2 * 3 * 3 + 6 + 9 + 6) * 8 * 8) * (8 + 5 * 4 + 9) + 2 * 4
4 * (6 + 9) + 8 + 3 + (5 + 2 + 8) + 5
9 * 6 * 6 + 5 * 7
(2 * (6 * 9 * 8 + 3) + 3 * 3) * 3 + 8 * 7
(3 * 7 * (9 * 2 + 4 + 5 * 4) + 2) + 3 + 3 + 7 * 8
8 * (9 * (7 * 9) + 2 + 2 * 9 * 9) + ((5 + 5 + 9 * 2 * 6 + 3) + 9 * 6)
(9 + 8 + 5) + 5 + 9 + 4 * 5
8 + (7 * 6 * 5 + 3 * (8 * 5 + 9)) * 9 + 2 + 3 + 5
(9 * 9 * 2 + (2 + 9 + 3 + 7) + 5) * 4 + 4 * (4 * 9 * 2 * 6) * 7
7 * 9 * (4 + 9 + 7 + 9 + 3 + 5) + 4 * (3 + 6) * 4
5 + ((3 + 6) * 8) * 2
7 + (2 * 3 * 5 + 8) + ((7 * 4 * 9 + 4 * 6 * 2) * 2) * 3 + 2
8 + (3 + 6 + (4 * 7 * 9 + 2 + 2)) * 6 + 4 * 4 + 9
(4 * (3 + 2 * 6 * 3 + 5) * 4 + 9 + 8) + 7 * 7
(8 + 7 * 9) + 7 + (4 * (7 * 2 * 7) * 2) + (6 + 8 * (3 * 7 + 3 + 3 * 2 * 2) + (8 * 4 * 6 + 3))
9 + 3 + ((7 + 4 * 3 + 6 + 4) * 6 * 2 + 7 * 4) * 5
((3 + 7) + 4) + 3 * 5 + (3 + 7 * 9 + 6 * 3 * 2)
7 + (4 + 4 + 9 * 5)
((5 + 3 * 7) + 6 + 8 + 2) + 3 * 8 * (3 + 9 * 6 + 4)
3 + 8 + 7 + ((3 * 8 + 7 * 4 * 5) + 3 * 8 * 9 * 4 + 3) * 7
5 * 3 * ((7 + 3 + 7 * 5 + 3 + 4) * (8 + 8 + 3 + 7 * 8 + 6)) * 6 + 4
(4 * (6 + 3 * 7 * 4) + 7 * 8) + 8
6 * (8 + 6 + 5 * 4) + 3 + ((3 * 6 * 4 * 2 * 6) * 8) * 9 + 6
(4 * (9 + 9 + 9 * 7 * 8 + 9) * (3 * 5 + 8 * 4 * 3) + 2 + 9 + 4) + (7 + 5 + (9 + 3 + 8) * (9 * 7 * 5 * 4) * 5) + 2 + 2 * 5 + (2 + 5 + 9 + (2 + 8 * 5 + 5 * 2 * 7) * 2 + (6 + 3 * 8 + 2 * 6))
(4 * (7 * 3) + (6 + 3) * 6 + 6) + (6 * (8 + 2 + 8 * 4 * 7 * 5) + 7 + (5 * 9 * 5 + 9 * 2) * 7 + 8) * 5 + 2 + 6 * 4
6 * 9 + 8 * (7 * 4 + 5) + 6 * (5 * 8 * 4 * 2 + (3 * 6) + 6)
6 * 3 * (4 * 2) * 5
7 + 6 + (4 * 9 * 3 + 2 * 9 + 6) * 4 + 7 * 7
(2 + (2 * 7 + 9 + 4)) * 9 * 8 * (3 + 9 * 6 * 9) * 4 * 9
(8 * 6 + (3 + 8 * 5 + 6 + 9) * 7 + 6 * 7) + 6 + 4 + 8 * 3
(4 * (7 * 9 + 5 + 7 + 2 + 7)) * (6 * (2 * 2) + 9 * 4 + 5) + (3 * 3 + 4 * (2 * 7 + 4) + 3) * 5 * 6 + 9
2 + (7 + 7) + 9 + ((9 * 2 + 2 * 8 * 5) + (2 + 3 * 2 + 8 + 9) * 3 + 7 * 4 + 2) + 3
((7 + 7 + 6) + 6 + 8 + (4 + 4 + 6 * 5 * 3 * 7)) + 6 * 7 * 9
2 * 9 + 9 * 6 * 2 + (8 * (3 * 3 * 7 * 6) * 4)
4 * (9 * 2 * 8 + 3 * 5) + 7
9 + 3 + 9 + 9 + 2 + (5 + 9 * 3 * 2 + 3)
6 + 7 + (2 + 5 + 2 + 8 * 4 * 8)
(9 + 7 * 3) + 4 * 4
6 * 7 + 9 * (8 + 7 * 4) * 8
(8 * 5) * 6 + 8 + (4 * 5) * 6
2 * 8 * 7 + (8 * (4 * 2 * 2 * 9 + 9) + (5 * 7 * 5 + 7)) * 8 + 5
5 * (5 * 8) + 8 + (9 * 8 * 2) * (5 + 4 * 3) * (4 * 7 * 6 + 2 + 4)
3 + 6 * 8 + (5 * (6 * 3) * 9 + 5 + 4 * 8)
7 * 2
8 * (7 + (7 * 8))
4 * ((8 * 2 + 2) + (9 * 5 * 2 + 3 + 6) * 6 * (3 + 5)) * 6 + 7 * 3 + 7
4 * 6 + 7 * ((3 * 5 * 4) * 7) * (2 + (7 * 3 * 4) * (5 + 3 + 6 * 8 + 7 + 4) * (5 + 7 + 7 + 3 * 3)) * 2
(8 * 8 + 2 * 4 * 7) + 9 * 8 * 6 + (8 * 4 * 2)
(4 * 8 + (6 * 7 + 5 + 7 + 4) + 8 + (9 + 3 * 8 + 8 + 6 + 9) * 3) * (4 * 4 + (6 * 7 + 7 * 9 + 9)) + 8
3 + (9 * 8 * 4 * 9 + 8 * 7) * 9 * 2
6 + 4 * (8 + (6 * 8) * 7 * 5) + 9 + 4
(8 + 9 * (4 + 3 + 6 + 2 + 5 + 8) + 6) + 7 + 9 * 3 * ((7 * 8 * 6 * 5 + 4) + 7 * (9 + 2 + 9 + 8 * 4) + 8 * 4 + (8 * 8 * 2 + 9 * 4)) + 6
(9 * 8 + 4 * (6 + 9 * 3 * 3 + 3 * 4) * 8 + 7) + 5 * (4 * 8 * (2 * 3 + 2) + 3 + 5 + 2) + ((2 * 6) * 8 + 6 * 4 + 8) + 6 + 9
((9 + 3 + 9 + 7) + 3) + 7 * ((8 + 6 * 7 * 4 * 7) * 8 * 8 + 2 + 6) + 3 * 8 * 4
(5 + 3 * 2) + ((4 + 3 * 5 * 5) + 6 + 7) + 7 * 7 + 8
4 + (9 + 4 + (9 * 7 * 8) + 5 + (5 + 7 * 5 * 8) + 8) + (6 + 5 * 5 + 7 + 9 * 8) * 9 + (4 + 4 * 8) + (5 + 4)
3 * (3 * (6 + 5 * 5 + 4 + 9 + 9) * 8 + (6 * 3 * 2 * 5)) * (6 + 2) * (4 * 6 * 8 * 5 * 5 * 2)
4 + 7 * (6 + 2 * 3) + 9 * (3 * 3 + 8 + 5 * (8 * 7 + 3 * 5) + 8)
5 * (2 + 9 + 9 + 8 + 4 * (7 + 2 + 9 + 2 * 6 + 8)) + 2
5 + (7 * 8 + 8 + 7 + 3) * 2 + 2
3 + 8 * 8 * (9 * (7 + 5 * 5 * 7) * 6) * 2
6 + 8 + (3 + (5 * 8 * 6 + 4 + 3 + 4) + (2 * 7 + 4 * 4) + 5) * (4 + 8 * 6 + (9 * 6 + 7 * 3) * 9 * 3)
4 + 8 * (2 * 9 * 6 + (4 + 9) + 8) * 9 + 6
5 * 3 * (3 + 7 * 7 * 3 * (6 + 5 * 7)) + 8 * 9
(2 + 8 + (6 * 8 + 5 * 5 * 2)) + 5 * (6 * 5 * 6)
4 * 5 + (7 * 4 * 3 + 7 * 7) * 8 + ((9 + 9 + 5 * 3 + 2) + (2 * 7 * 8 + 3) + 7 * 2 + (5 + 8 + 8))
7 * (4 * 2 * (8 * 8 * 7) * 3 * 9 * (2 * 4 * 3 + 2))
6 * 7 + 8 * 8 * (8 + 2 * 5 + 8 * 6 * (4 + 8 + 3 + 3 * 7)) + 6
8 + 2 * 2 + (7 + 8 + 5) * (6 + 9 * (4 * 6) + 3 + 8 * 7)
5 * ((3 + 8 + 4 * 4) * (4 * 5 * 8 * 8 + 8 + 8) + (8 + 7 * 9) + (6 + 5) + 2 * 9) * (7 + 8 * 7 * 4)
(3 + 7) + 9
9 * 5 + 7 * (3 + (6 + 3)) + 5 * 8
2 + 6 * 5 + 6 + ((8 * 8 * 9 * 4 * 9 + 6) * 4 + 4 * 2)
3 * 2 * (6 * 8) * 8 * (2 * 8 * 8 + (4 + 6 * 2 * 4)) * 5
4 * (8 + 7 + 7 * 8 + (7 + 5)) + 6 + 8 + 7
(5 + 4 + (7 * 7) * 2 * 4 + 3) + (8 * (6 + 6 * 9 + 7 * 7 * 3) * 2) * 3 + 5 + 9 + 7
8 + (8 * (5 + 3 * 7 * 6 * 7) * 9 * 9 + 7) * 8 * 4
7 * (6 * 8 * (6 * 3 + 9 + 8 + 8) + 7) + 7 * 7 * 3 + 4
2 + (9 * 4 * (9 + 7 + 6) + 3 * 8 + 7) + 7 * 2 + (4 + (7 + 2 + 9 + 9 + 7 + 2) + (9 * 3 + 4 + 4 + 3 + 8))
(4 + 4 * (4 + 7 + 3 + 3 * 9 + 8) + 3) * 7 * (7 * 6 + 9) + 4 * 4 + 5
8 + 6 * 8 * 5 + (7 * (4 + 9 + 3 * 6 + 8) + (7 * 9 * 2 + 3 * 2 + 8) * 6 + (4 + 7 + 4))
(3 * (4 * 7 * 3 * 8) * (6 + 7 + 6 * 7 + 7 * 2) * 8 + 5 * 7) + (9 + 8 + 7 + 5 + 6 * 7) * 5 * 4 * 5
3 + 3 * 2 + ((2 * 3 + 2 + 6 * 6) * 6) * 8 * (3 + 7 * 8 + 6 + 3 + 8)
(5 * 4) * ((3 * 2 + 9 * 4 + 5 + 7) + (7 * 3 * 7 + 9 * 7 * 5) * 7 + 4 + 6)
3 + 2 + 5 * 7 * 9 + 2
(4 + 6 * 3 + 3 * (6 * 3 + 5) * (6 * 3 + 5)) + 2
5 + 8 + 6 * 3 + 3 * 2
(8 + 7 * 4) + 7 + 3 + 4
(3 + 3 * 9 + 7 * 7 + 3) + 6 + 5 * (2 + (4 * 2 * 2 + 9 + 6) * 2) * 6 + (7 + 2 + 7)
9 * 2 * (3 + (8 + 7 * 5 + 3)) + ((9 + 3 + 6 + 7) * 9 * 8 + 5 * 6) + 5
(6 * 4) * 7 + 4 + 3 + 5 * 4
8 * 2 + (6 * 4 + 3 + 6)
(4 + 5 * 2 + 9 * 9 * 6) * 8 * 7 * ((4 * 3 * 3) + 5 * 6 * 2) + 9
(8 * 5 * (5 * 7 * 5 + 4 + 5) * 2 + 9 * 6) + 4 + 6
2 * 5 + ((2 + 8) + 3) * 5 + 7
5 + ((8 + 2 * 6) + (2 * 5 + 6 + 4 * 8 * 7) + 3 + 7 + 8)
6 * 2 * (6 + 8 * (3 + 7 * 5) * 2 * 7) + 8
2 + 2 + ((8 + 2) * 8 * 8)
3 + 7 + ((8 * 2 + 3) * 9 + 2 * 4) + (9 * 9 * (3 + 7 + 3 + 5 + 4) + (8 * 5 + 4) + 9 + 7)
3 * 5 + ((4 * 8 + 8 + 7) + 8 * (3 * 3 * 7 + 9 * 6 + 3) + (9 + 2 + 3 * 9 * 8)) * ((7 * 8) + 9 + 2 + 9 * 2)
(7 + 9 + (2 + 8 + 7 * 7 + 4) + 9 + 6 + 7) + 6
2 + ((2 * 9 * 7 + 4) + 3) + 3 * (8 * (9 * 4 + 7 * 3 + 3) + 8 + 5 + 7) * (9 + 9 * 5 + (8 + 9) + 2 + 5)
8 + (3 + 5 + 9 * 7) + (7 * (9 + 8) + 8 + (9 * 7 + 8 + 6 + 8)) * 2
(3 * (6 + 6 * 6 + 2) * 9 + 5 + 6) + 8
6 * 5 + ((9 + 5 + 5) + (6 * 5 * 7 * 7) + 7 * (9 * 7 * 4 + 6)) + 7
2 + 7 * 7 + 2 * ((5 * 8 + 9 + 9 + 8) * 9)
((2 * 8 * 4 + 2) + 3) * 4 + 9 + 3 + (7 * 7 * 4 + 2 * 2) * 3
6 * 8 + ((3 + 6 + 4 * 3) + 6) * 3 + 9
(5 + 2 * 3 * 4) * 3 + 7 + 7
((7 + 4 * 7 + 7 * 9 * 8) * 3 + 9) * (7 * 2 + 9 * 9 * 8) + 5 + 8 + 6
6 + (2 + (9 * 6) * 4 + 5 + 5) + (5 * 2 + 6 * (2 + 2) + 6 + 9) + 5
6 * 3 * (6 + 5 + 4 * 8 + (9 + 2 * 4 * 5 + 4 + 7)) + 5
9 + (2 + 3) * (6 + 5 * 5 * 2 * (3 * 6)) + 6 + 8 + (4 + 8 * 9)
((7 * 5 * 5 + 9 + 3) * (7 + 7) + (2 + 6 + 6 * 3 + 7) + 5) + 6
8 + 2 * 9 + 3 + 4
(7 * 8 * 4 * 9 + (9 * 9)) * 4 + (4 + (7 * 3 + 6) + 2 + 4 + 9 * 5) + 9
(4 + 5) * 8 * (5 * 5) * 4 * 8
(4 + (5 + 4)) * 7 * 4 + 9
3 + 8 * (3 * (5 * 2 + 6) * 9 + (4 * 2 + 6 + 7) + (9 + 9 * 8)) + 5 + ((2 + 7 + 8 + 8) * (7 + 8 + 3 * 9)) * 9
8 * 9 + ((8 * 7 + 4 * 5 + 8 + 4) + (3 + 8 * 4) + 8 * 3 + 3)
6 + (6 + (2 * 5 + 2 * 8)) * 6 + 8 + 4
((9 * 5 * 5 + 8) * 9 * 2 * 6 + 3) + 6 + 6 * 6 * ((5 + 3 * 2 + 4) + 8 + 8 + 6 * 4)
((5 * 3) + 6 + 5 * 5) * (6 * 8) + 3
((9 * 5 + 6 + 2 * 5 + 3) * 6 * 6 * 7 * 2 * 2) + 6 * 8
2 + 9 + 3 + 5
5 + 4 + 3 + 4
6 + (5 * 2 + 8 * 4 + 9)
(7 * 5 * 3 * 9 * 9) + 6 + 5
8 * 8 + (8 + 9 + 5 * 4) + 3 + (5 + 2 + 6 + 6) + 9
9 + ((7 * 2 + 7 * 4 + 9) * 8 + 5 + 6 * 3 * (8 + 4)) * 2
5 * 8 * ((9 * 5) * 4 * 7 + 2 + (4 + 4 * 3 * 5) * 7) * 4 * 8
4 * 9 * (3 + 4 + 9 * 7) + 2 + (5 + 6) + ((6 * 2 * 8) + 9 + 5 + 2)
6 + 7 + (4 * (5 * 7 + 9) * 2 + (5 * 3 * 7))
(9 * (9 * 3) + 9 + (3 + 2) * 6 + (4 + 4 + 9 + 4)) + 7 + 8 * (6 + 8 + (6 * 9 * 2 * 8)) * (8 + 6) + (8 * 6 + 2 * 7)
5 * ((4 + 2) * 2 * (2 + 9 + 2 * 4 * 3 * 4) * 4 + 8 + 3)
8 + 6 * (7 * 6 + 9 + 3 + 6)
(5 * (8 * 7 + 4) + 3) + 2 * 5 * 4
9 + (2 * 3) + 3
4 + 5 + 6 + 8 + 4 * 9
(3 * 3 + 4 * 4) * (4 + 7 + 6 * 6)
3 + 9 + (5 * 8 + 7 * (3 * 5 * 8 * 9 + 7 + 6) + 8)
7 + (8 + 5 * 9 + 6 * 3 + (9 + 3 * 7 * 5 + 3 * 2)) * 7 + 5
4 * 6 + 3 * (5 + (6 + 4 + 9) * 6) + 2
2 * 3 + 8 + 9 * 6 + (2 + 3 + 5)
8 + ((3 * 4 * 7 * 2) + 4 + 5 + 2) * 9
7 * 4 + 2 * 4 + 9 + (3 * 7 + 2 * 6 * (8 + 9 * 9) * 5)
4 * 3 * (7 * (8 * 5 * 8 + 3 + 9) * 3 * (4 * 8) + 4 + (9 * 3 + 9 + 6 * 4 + 9))
7 * 6 * 7 * (3 + 4 * 3) * (5 + 5 + 2) * 7
2 + 6 * ((4 * 3 + 6) * 5 * 8 + 4 * 2 + 9) + 6
6 + 4 + (5 * 5 + 7) * 8
(5 * 3 * 8) * (6 * 6)
5 * (6 * 5) + 9 + 7 + (6 + 6)
((3 + 6 * 6 * 5 + 3) + (6 * 3 + 8 + 8 + 7) * 2 * (3 * 5 + 3)) + 3 * ((6 * 6) + 2 + 4) + 3 + 5 * 5
9 * (2 * 6 * 4 + 7 + 5 + (8 + 4 + 7 * 2)) + 5 + (3 * (4 * 5 * 6 + 6 + 4 * 4) * 5 + 8)
8 + 3
3 + (2 + 4 * (7 * 4 + 9 * 9) + 2 + 3) + 6
((5 + 9 * 6 + 3) + 2) + 5 * 2
3 + 8 * 2 * 4 + (2 + 3 + (3 + 9 * 6)) + 5
6 + 5 * ((9 * 9) * 9 + 4 + (8 + 3) * 8 * 5) + (8 * 8 + 2 + (5 * 6 * 5 * 3 + 9 + 7) + 5) * 5 * 5
(6 * (5 * 3 + 9) * 3 * (7 + 4 + 8 + 3 + 8 + 6) * 5) + 3 + 7 * 2 * 9
6 + 3 + (2 * 2 + 9 + (4 * 4 * 2 + 3 * 4 * 9)) + 9 + 8 * (7 * 2)
((2 + 7 * 8) * 8 + 7 + 3 + 8) * 4 * 9
9 + 9 * 5 + 7 + ((9 * 9 * 4 + 4 + 3 * 7) * 5 * 5)
(6 * 7 + 3 + 4 + (7 + 9 + 3 + 2)) + 3 + 6 * 9 + 8 * 7
((2 + 5) + (8 + 8 * 8 * 2 * 4 * 9) + 3 + 5) + 3 + 8
4 * 4
6 * 8 + (9 + 2 + 4 + 3 + 2 + (8 * 2 + 3 + 2 + 9)) + 8 + 3
7 + 2 + (2 * (7 + 2 + 9 * 3 * 5 * 8)) + 4 + 5 * 4
4 * 6 * 8
5 * 4 + 4 + 2
6 + 3 * (8 * 4 + (5 * 6 + 2))
2 * (2 + (2 * 9) + 7 + 9) + 6 * 7
6 * 3 * ((2 * 5) * 3 * 5 * 2) + ((2 * 8 * 7 + 9) * 3 + 5 + 2)
(2 + 3 + 9 + 9 * 7) + (8 * 8 + 2 * 7 * 3) + 3 + ((5 * 5 + 4) * 2 * (3 + 8 * 6 + 2)) + 5
6 + ((3 + 8 * 3 * 9 * 7 + 3) + 2 * 3) * 4 * 9 + (3 + 2 * 7)
((2 * 4 * 4) * (2 + 5 * 4) * (9 * 7 + 3 + 9)) + 7 + 7 + 8 * 4 * (5 * (4 * 9) + 4 * (7 + 9 * 9 * 2 * 9) + 3)
2 + 2 + ((2 + 5 + 7) * 8 + 3) + 5
3 + ((6 + 4 + 9 + 9 + 5 + 6) + (6 + 7 + 3 * 2 * 8 + 3) + 9 + (3 * 2 * 9) + 9 * 3) + 9 * ((6 * 7 * 9 + 9) + 3 * 3 + 7)
4 * 9 * 4 * 7 * (4 + 4) + 3
2 * (7 * 5) * 2 + ((8 + 2 + 6 * 4 + 6 * 4) * 4)
6 * (2 * 8 * 4 + 6) * 7
2 * 3 + 7
(7 + 8 * (8 * 6 * 4) * 5) + (9 + 9 * 3) * 2 * 9
4 + 3 * (5 + 5 * 9) * 9 * 2 + 8
8 * (2 + (5 * 8 * 3 * 8 + 7) + 3 + 7)
(2 + 2 * 2) * 2
(4 + 2 * (8 + 4)) + 2 * 8 * (6 + 7 * 9 * (3 * 2 + 3) + 7 * 9) * 3
(9 + (5 + 2) + 7 + 6) * (9 * 4 * (4 + 7 * 7 + 6 + 5) * 7) + 7 * 7
2 * (3 * 7 * 7 + 7) * (6 + 2 * 6) + (9 * (4 + 2 + 9 * 8) * 9 + 7 + 7)
(6 + 7 + 8 * (6 * 9 + 2) + 5 * 3) * 4 * (6 * 8 * 5 + 7 * 3) + (8 + 2 + 8 + 2 + 8) * 5 * (6 + 9 + 7 * 8)
2 * 8 * (6 * (4 + 5 * 2) + (3 * 4 * 2 * 3 + 7) * 7 * 5)
3 + (9 + 3 * 7 + (8 + 4 + 2) + 3) * 4
9 * (8 * (3 * 7 + 2) + (8 * 3 + 7 + 3 * 4 * 2) + 2 * 2 + 8) * 4 + 2
7 * 3 * 6 + (7 + 5)
(8 * 7 * (3 * 2 * 9 * 8)) + ((4 * 3 + 7 + 8) + (6 * 8) + 3 + (5 * 9 + 8 + 7 + 5) * 8 + 5) * 9 + 5 + (4 + (9 * 9) + 5 * 3 * (4 * 2)) * 8
((3 + 8) + 6 * 5 * 6 * 5 * (4 + 8 * 9 * 5 * 9 + 9)) * 9 * 3 + (6 * 3)
(6 + 5 * 2 + 5 + 9) + 4 * (9 * 6 * 5) + 6 * 9
((7 + 5) * 2) + 7 * (4 + 4) * 9
(5 + (5 + 2 * 5 * 6)) * 2 + 4
8 + (3 * 4 * 9 + (6 + 3 * 5 * 2) * 9 * 9)
3 * 5 + 2 + 2 * 9 + (4 + 6 * 9 * 3)
4 * 6 * ((5 * 7 * 8) + 6) * 9
3 * 8 + (8 + 6 + (9 * 4 + 5 + 4)) * 9 + 9 * 7
(6 * 2 + 3 * 8 * 4 * 2) * (3 * 2 + 8 + (8 * 9 + 9 * 2 * 2) * 8) * 2 * 3
8 * 4 + 4 + 2 + (4 * (6 + 2 + 8 + 6 * 6) * (5 + 6 + 9 + 2 * 2) * (3 + 7 + 8 + 6 * 8) * 5 * 7) + 3
(2 * 5) + ((7 + 6) + 9 * 7 * (7 + 5 * 6 + 3 + 9)) * 4
2 * ((4 + 2 + 6 * 5 * 9) + 4)
(5 * 9 * 2 + 5 + (4 + 9 * 4 + 8) + 2) + 8 * 3
4 * ((6 + 7 * 3 * 9 * 8) + 5 * 2) * 2 + (6 + (9 + 5 + 3 + 7 * 5) * 2 * 2 + (9 * 8 + 7 + 7 * 6)) * (4 * 7)
2 + 9 * 6 + 6 + (4 * 5 + 3 * (2 * 2 * 4 * 5 + 7 + 6) + 7 * 5)
7 + ((9 * 4 + 7 + 9) + (4 + 6 * 7 + 4)) * 5 + ((9 + 8 * 5 * 9 * 9) * 9 + (3 * 2 * 6) * 2 * 6 + (3 + 7))
(9 * 5 * 9) + (3 * 9 + 2) * (2 * 6 * 7 * (6 + 3) * 6 + 4) + 3 + 8
(8 * (8 * 3 * 2)) * (4 + 5) * 7 * 3
7 + 7 + ((2 * 2) * 7 + 4 + 7 * 9)
(6 + 5 + 9) * 6 + 2 * 9 * 9 + 3
4 + 2 + (3 * (4 + 7 * 6 * 7 + 3 + 3) + 7) * (2 + 2 + 7 * (6 + 2 + 8 + 3 * 8 * 4) + (8 + 2)) + (7 * 8)
(4 + 7 + (3 * 2 + 9 + 5)) + 9 + 6 * 7 * 2 + (5 + 5 * 3 + 7 + 9 + 9)
6 * 9 * 7 * (3 + 5 + 2 * 4 + 6 + 6)
(5 * 3 * (6 + 8 + 9 * 6)) * 8
(6 * 5) + (7 + 4) * (4 + 9 + 4 + (2 * 3) * 7)
4 + 6 * 5 * (2 * 2 * 2 + 3 + 6 * 4) + 7 * 9
9 * 5 * (8 * 9 * 6 + 5 * (3 * 5 + 9 + 9 + 6) + 5)
3 * (9 + 7 * 2) * 6
5 + 9 + 6
6 + (7 * 5 * 9 + 3 + (6 * 3 + 8 + 4 * 9)) + 3 * 5 + 3
7 + 5 * ((2 * 4 * 4) + 3 + 4)
(7 * 8 + 2 + 8 * 4) + (7 + 3) + 7 + 7 * 6 + 3
(8 + 6 + 5 + 5 * (5 + 3 * 3)) * (8 * (5 + 9) * 4) + 5 + 7 + ((8 + 8) * 3 * 9 * 9 * 6 + 2)
(8 * 2 * 5 + (8 * 8 * 2)) * 4 * 2 + 3 * 2
5 + 4 * 2 * 9 + (6 * 3)
2 + 9 * ((5 + 3) * 3 * 9 + (6 + 4) * 6) + 9 * 7 * 4
6 + 5 + 6 * 9 + (2 + 3 + 9) + ((4 + 7) * 6 * (7 + 2 * 3) * 2 * (7 * 2 + 3 + 7 * 9))
2 + 7 * (6 * (9 * 6 + 2 * 3 * 7 + 5) + 9 * 2 * 5) * (4 * 5) * 5
(8 + 7 * 3) + 6 + 7 * 6 + (5 + 2 * 5 * 2 * 6 + 7) * (7 * (4 + 8 + 7 + 6 + 2 * 2) * 8)
(8 * 2) * 3 * 4
2 * 7 + (8 + 7 + 8)
((5 * 8) * 3 + 8 + 7) * 3 * 5
((3 * 4 * 6 * 8 + 6) * 6 + (4 * 9 * 9 * 7 * 6) * 6 + 8) * 7 + 9 * 2
(3 * 9 * 2 + 6 * 7 * (3 + 7 + 9 + 4 * 3)) * 2 * 8 * 9 * (2 + 3 * 7 * 9)
(6 * 8 + 6 + 2) * 7 + 8
7 * (9 * 2 + (2 + 6 * 2 * 5 * 8)) * 3 + 8
7 * 2 * 6 + 6 * 2 * 8
5 + 8 + (4 + 9 + 8 + (9 + 8 + 6 + 4) * 3 * 6)
(3 + (7 + 9 + 4 + 5 * 6 * 7) + (6 + 4 + 3 * 7 * 2)) * 2 + 3
6 + 7 + (6 * 6 + (4 * 5 * 5 + 3 + 6 + 4) + 3 + 9)
5 * 2 + 6 * 6 * (2 * 8 * 8 * 2 * 2 + 2)
5 + 7 * 8 + (7 * 4) * 4
9 * 8 + 9 + (4 * 6 + (8 + 2 + 4 * 7 + 3) * 4 * (2 * 8 * 5 * 3))
5 * 6 + 6 * 7 + (5 * 8 * 2 * 2)
3 + 8 * 6 + 7 * 7 + ((6 * 5) + 6 + (7 * 9) + 3 + (3 * 2 + 5))
8 + (9 + (6 + 5 * 6))
3 + (9 * 7 + 6 * 6 * 9 * 2) + 7 * 7 + 8
6 + 3 + 4 * 2 + 9 * (9 * 6 * 6 + 7 + 7 + (4 + 7 + 8 * 4 + 6))
6 + (6 * 4 * 5 + 3 * 9 * (6 + 8 * 6 + 4 * 7 * 3))
9 * (3 + 9 * 7)
7 + 3 + 3 + 9
7 * 3 * ((6 + 8) + 5 * 4 + 8 * 9 * (9 * 3)) + 9
7 + 3 * (2 + 2 + (5 * 7 + 9 * 4 + 4) * 5) + 4 * 2 * 2
(4 + 2 * (4 * 8)) + ((5 + 9 * 8 + 8 + 8 + 4) * 8 + 9) * 5
2 * (4 + 9 + 8) + 8 * 3 * 8
((5 + 5) * 5 * 7 + 9 * 3 * 9) + 9 * 6 + 9
(7 * 4 * 6 * 9 + 4) * (9 * 2 * (7 * 4 * 7) * (7 + 8 * 6 * 8 * 3 * 7)) + 3 + 3 + 2
(5 * 7 + 6 * 4 * 7 + (9 + 2 * 2)) * 7 * 3
3 * 3 + ((2 * 9 + 5 * 3) + 8 + 5 + 9) + 2 + 8 + (9 + 9 * 4)
((7 + 3) * 9 * 3 + 9 + 4 + 9) * ((5 + 4 + 2 + 2 + 2) + 6 * 3 * 8)
8 + 9 * 5 + (9 + 2 + (3 * 6) * 2 * 4 + 3) * 5 + 8
(9 * (5 * 3) + 8) + (2 + (9 * 6 + 8 * 6 + 8) * 5 + 6 + 5 * 7) + 7 + 2 + 8
8 * 8 + 6 + (4 + (7 + 6 * 8 + 7 + 8 * 7) + (9 * 3 * 5 * 4 + 3) * 7 * 9 + 8) + 7
2 * 8 * 4 * 5 + (8 * 4 * 6)
5 * (3 * 4) + 8 * 5
9 * (6 + 4 + 9 + (6 * 3 + 4 * 4 * 9 + 9)) * 9
4 + 3 + (3 + 6) + ((5 * 6 * 6 * 9) * (6 + 2) + 6)
5 + 3 + 3 + (7 * 3 * 5 + 5 * 3) + 9
(2 + 6 + 8 + 3) * (9 + 7) * 6
(6 + 7) * 9 * 8 + 3 + (3 * 7) * (3 * 4 * 6 + (6 * 6) * (8 * 6 + 7 * 8))
9 + (7 + 5 + 3 * 5) + 7 + 6
(7 * 3 + 9 * 2 + 5 * 8) * 9 + 3 * 9 * 9
5 * 6 * 2
5 * 2 + 7 * (8 * 3 + 4 * (7 * 9 + 2)) * (4 + 2 * (8 * 5 * 5 * 9 * 3) * 5 * 4 + 6)
4 * ((3 + 3) * (5 * 7 * 2 * 4) + (9 * 5 + 9 + 3 + 5 * 6) * 6 + 7) + 3
6 + 7
3 + 4 * ((5 + 7 + 4 + 2 * 6 + 2) + 6 * 7)
(4 + 6 * 2 + 8 + 5 * 5) + 9 * 5 + 2
2 * 8 * (7 + 6 + (9 + 2 * 8 + 7)) * ((3 * 5 + 6 + 4 + 5 * 3) + 6 * 8 + 9 + (8 + 9 * 6 * 4) + (5 + 4 + 3 * 2 + 9)) + 6
3 + 7 + 3 + ((7 * 9) * 9) * 3
6 * 4 * 3 * 7 + (4 * 2 * 2 + (6 + 9 * 6))
((8 + 6 + 2 + 3 + 7 + 2) * (7 * 2) + 6) * 8 * 4
6 + 7 * 4 * 4 * (8 + 5 + 8 + 9 * 9) * 7
(5 + 9) * (4 * 8 * (4 + 9 * 4) * 4 + 3) + 6 * 5 + 9 * 3
3 * 4
(3 * 2 * (6 * 5 * 5) * 3) + 6 * 4 + (8 + 9 + (6 * 4)) + (3 * 9 * 5 * (6 * 3 + 2) * (3 * 2)) * 7
5 + ((2 + 2 * 9 * 9 * 5 * 8) + 7 + 9) * 4
(7 + 2) + 4 * 4 + (7 * 4) * (5 + 9 * 2)
(4 + (2 * 8 + 2 * 6) * 3 + 2) * 9 * 3 * ((2 * 6) + 6 * 3 + 7 * (9 * 8 + 7 + 4)) + 2
9 + (4 + 8) * (7 * 3 + 4) + 7
9 + 5 * 9 * ((2 + 3 + 3 + 6 + 5) + 8) + 2 + (3 + (9 * 9) + 2 * (5 + 8 + 8 + 7) * (8 + 7 + 5 + 5 * 7 * 7) * (9 + 5 * 8 * 5 * 8 + 2))
((6 * 9 * 5 * 3) + 5 + 3) * 9
(8 * 6 + 7 + 2 + (4 * 7 + 7 + 8 + 8) + 8) + 4 + 3
4 + (9 * 4 + (2 + 4 * 3) + 9 * 9 + 5) + 5 * 2 * 4
6 + 2 + 4 + (8 * 8 * (7 * 2 + 7 * 2 * 9 + 6) + 9)
8 * 8 * 6 * 5 * 5
4 * 3 + (5 + 2 + 6 * (7 * 8 * 7 + 5) * 5 * 8) * (9 * (6 * 6 + 3 * 5) + 9 + 6) + 6 + (2 + (2 + 5) + 3)
3 + (6 * 9 * (4 * 4) * (7 + 2 + 9 * 3 + 5 + 8)) + (3 * (6 + 7 * 4 + 9 * 8) + 3 * 5 + 9 * (5 + 9))
(3 + (3 + 3 * 6) * 4) * 5
"""

enum Part: CustomStringConvertible, Equatable {
    case enter
    case leave
    case number(Int)
    case multiply
    case add
    case parts([Part])
    
    var description: String {
        switch self {
        case .enter: return "("
        case .leave: return ")"
        case .number(let value): return "\(value)"
        case .multiply: return "*"
        case .add: return "+"
        case .parts(let parts):
            let s = parts
                .map { "\($0)" }
                .joined(separator: ",")
            return "[\(s)]"
        }
    }
}

typealias Expression = [Part]

func process(expression: Expression) -> Expression {
    var expression = expression

    var result: [Part] = []
    
    var subexpression: [Part] = []
    var collecting = 0
    
    while expression.count > 0 {
        let first = expression.removeFirst()

        switch first {
        case .enter:
            if collecting > 0 { subexpression.append(first) }
            collecting += 1
            
        case .leave:
            collecting -= 1
            
            if collecting > 0 { subexpression.append(first) }
            else if collecting == 0 {
                result += process(expression: subexpression)
                subexpression = []
            }
            
        default:
            if collecting > 0 { subexpression.append(first) }
            else { result.append(first) }
        }
    }
    
    return [.parts(result)]
}

func solve(expression: Expression) -> Int {
    // First, solve all sub-expressions
    var working: [Part] = []
    
    for part in expression {
        switch part {
        case .parts(let value): working.append(.number(solve(expression: value)))
        default:
            working.append(part)
        }
    }

    // Then do all additions
    while let index = working.firstIndex(of: .add) {
        let lhsPart = working[index - 1]
        let rhsPart = working[index + 1]
        if case let Part.number(lhs) = lhsPart, case let Part.number(rhs) = rhsPart {
            let result = lhs + rhs
            
            working.replaceSubrange((index - 1)...(index + 1), with: [.number(result)])
        }
    }

    // And finally do all multiplications
    while let index = working.firstIndex(of: .multiply) {
        let lhsPart = working[index - 1]
        let rhsPart = working[index + 1]
        if case let Part.number(lhs) = lhsPart, case let Part.number(rhs) = rhsPart {
            let result = lhs * rhs
            
            working.replaceSubrange((index - 1)...(index + 1), with: [.number(result)])
        }
    }

    if case let Part.number(value) = working[0] {
        return value
    }
    
    // That won't happen.
    return 0
}

var solution = input
    .components(separatedBy: .newlines)
    .map {
        $0
            .replacingOccurrences(of: "(", with: "( ")
            .replacingOccurrences(of: ")", with: " )")
            .components(separatedBy: .whitespaces)
            .map { component -> Part in
                switch component {
                case "(": return .enter
                case ")": return .leave
                case "*": return .multiply
                case "+": return .add
                default:
                    return .number(Int(component)!)
                }
            }
    }
    .map { process(expression: $0) }
    .map { solve(expression: $0) }
    .reduce(0, +)

print("Solution:", solution)

// Solution: 9966990988262
